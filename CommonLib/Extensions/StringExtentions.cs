using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using CommonLibCore.CommonLib;


public static class StringExtentions
{

    private static string validURLCharacters = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIKLMNOPQRSTUVWXYZ-_";
    private static string validFileNameCharacters = "abcdefghijklmnopqrstuvwxyz0123456789.ABCDEFGHIKLMNOPQRSTUVWXYZ/";
    private static string validKeyNameCharacters = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIKLMNOPQRSTUVWXYZ_";
    private static string validGraphQLKeyNameCharacters = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIKLMNOPQRSTUVWXYZ_";

    public static string MergeWithObject(this string inputStr, object rawdata)
    {
        ///ph√¢n t√≠ch c√∫ ph√°p ${xxx}

        // N·∫øu rawdata l√† null, tr·∫£ v·ªÅ inputStrputStr
        if (rawdata == null)
            return inputStr;

        // Chuy·ªÉn ƒë·ªïi rawdata th√†nh m·ªôt Dictionary<string, object>object>
        Dictionary<string, object> dic = rawdata.ConvertToDictionary();

        // M·∫´u regex ƒë·ªÉ t√¨m c√°c placeholder trong inputStr
        string pattern = "\\${([^{}\\$]+)}";
        var matches = Regex.Matches(inputStr, pattern);

        // L·∫∑p qua t·ª´ng match t√¨m ƒë∆∞·ª£c trong inputStr
        foreach (Match match in matches)
        {
            try
            {
                // T√¨m placeholder ƒë·ªÉ thay th·∫ø (v√≠ d·ª•: ${name})
                string replaceKey = "\\" + match.Groups[0].Value;
                // L·∫•y t√™n kh√≥a t·ª´ placeholder (v√≠ d·ª•: name t·ª´ ${name})´ ${name})
                string key = match.Groups[1].Value;
                // L·∫•y gi√° tr·ªã c·ªßa key t·ª´ rawdata rawdata rawdata rawdata
                var value = rawdata.GetFieldValue(key);
                // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã th√†nh chu·ªói JSON
                var datastr = value?.ToJson();
                // N·∫øu gi√° tr·ªã l√† boolean, chuy·ªÉn ƒë·ªïi n√≥ th√†nh ch·ªØ th∆∞·ªùng
                if (value?.GetType() == typeof(bool))
                    datastr = datastr?.ToLower();
                //trong tr∆∞·ªùng h·ª£p boolean h√†m ToString b·ªã chuy·ªÉn th√†nh ch·ªØ hoa ch·ªØ c√°i ƒë·∫ßu --> c√≥ th·ªÉ g√¢y l·ªói
                // Thay th·∫ø t·∫•t c·∫£ c√°c placeholder b·∫±ng gi√° tr·ªã t∆∞∆°ng ·ª©ng
                inputStr = inputStr.ReplaceAll(replaceKey, datastr);
            }
            catch (Exception ex)
            {

            }
        }
        return inputStr;
    }

    public static string ReplaceAll(this string content, string pattern, string contentReplace)
    {
        return Regex.Replace(content, pattern, contentReplace);
    }

    public static string RemoveHtmlTag(this string text)
    {
        string output = text.ReplaceAll("<.*?>", "");
        return output;
    }

    public static string GetTextEncodeTransform(this string content, Encoding sourceEncode, Encoding destEncode)
    {
        // Ki·ªÉm tra n·∫øu chu·ªói content l√† null ho·∫∑c r·ªóng, tr·∫£ v·ªÅ content£ v·ªÅ content
        if (content.IsNullOrEmpty())
            return content;

        // ƒêƒÉng k√Ω provider ƒë·ªÉ h·ªó tr·ª£ c√°c m√£ h√≥a kh√°c ngo√†i UTF-8, Unicode, ASCII.nicode, ASCII.
        Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
        // Chuy·ªÉn ƒë·ªïi chu·ªói content th√†nh m·∫£ng byte s·ª≠ d·ª•ng m√£ h√≥a ngu·ªìn.
        byte[] sourceBytes = sourceEncode.GetBytes(content);
        //Chuy·ªÉn ƒë·ªïi m·∫£ng byte t·ª´ m√£ h√≥a ngu·ªìn sang m√£ h√≥a ƒë√≠ch:m√£ h√≥a ƒë√≠ch:
        byte[] destBytes = Encoding.Convert(sourceEncode, destEncode, sourceBytes);

        // T·∫°o chu·ªói m·ªõi t·ª´ m·∫£ng byte s·ª≠ d·ª•ng m√£ h√≥a ƒë√≠ch. m√£ h√≥a ƒë√≠ch.
        string transformedStr = destEncode.GetString(destBytes);
        // Tr·∫£ v·ªÅ chu·ªói ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi m√£ h√≥a.
        return transformedStr;
    }

    public static string FromAnsiToUtf8(this string content)
    {
        // Ki·ªÉm tra n·∫øu chu·ªói ƒë·∫ßu v√†o l√† null ho·∫∑c r·ªóng th√¨ tr·∫£ v·ªÅ ngay chu·ªói ƒë√≥ v·ªÅ ngay chu·ªói ƒë√≥
        if (content.IsNullOrEmpty())
            return content;
        // ƒêƒÉng k√Ω b·ªô m√£ h√≥a ƒë·ªÉ h·ªó tr·ª£ c√°c m√£ m√£ h√≥a kh√¥ng chu·∫©n h√≥a kh√¥ng chu·∫©n
        Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
        // X√°c ƒë·ªãnh b·ªô m√£ h√≥a ngu·ªìn l√† Windows-1252 (m√£ ANSI m·∫∑c ƒë·ªãnh cho c√°c  ng√¥n ng·ªØ T√¢y √Çu
        Encoding sourceEncode = Encoding.GetEncoding(1252);
        // X√°c ƒë·ªãnh b·ªô m√£ h√≥a ƒë√≠ch l√† UTF-8 l√† UTF-8
        Encoding destEncode = Encoding.UTF8;
        // Chuy·ªÉn ƒë·ªïi chu·ªói t·ª´ m√£ ANSI sang m·∫£ng byte theo m√£ h√≥a ngu·ªìn
        byte[] sourceBytes = sourceEncode.GetBytes(content);
        //byte[] destBytes = Encoding.Convert(sourceEncode, destEncode, sourceBytes);
        // Chuy·ªÉn ƒë·ªïi m·∫£ng byte t·ª´ m√£ h√≥a ngu·ªìn sang chu·ªói UTF-8
        string utf8str = destEncode.GetString(sourceBytes);
        // Tr·∫£ v·ªÅ chu·ªói UTF-8 ƒë√£ chuy·ªÉn ƒë·ªïiy·ªÉn ƒë·ªïi
        return utf8str;
    }

    public static Type GetType(this string field, Type cursorType)
    {
        // T√°ch chu·ªói field th√†nh m·∫£ng c√°c ph·∫ßn t·ª≠ d·ª±a tr√™n d·∫•u "."tr√™n d·∫•u "."
        string[] listId = field.Split(".".ToCharArray());
        // L·∫•y thu·ªôc t√≠nh (property) ƒë·∫ßu ti√™n c·ªßa cursorType c√≥ t√™n l√† listId[0]
        var property = cursorType.GetProperty(listId[0]);
        // L·∫•y ki·ªÉu d·ªØ li·ªáu c·ªßa thu·ªôc t√≠nh n√†yôc t√≠nh n√†y
        cursorType = property.PropertyType;
        //Type cursorType = typeof(TObject);
        // N·∫øu field ch·ªâ c√≥ m·ªôt ph·∫ßn t·ª≠ (kh√¥ng c√≥ d·∫•u "."), tr·∫£ v·ªÅ ki·ªÉu d·ªØ li·ªáu c·ªßa thu·ªôc t√≠nh
        if (listId.Length == 1)
        {
            return cursorType;
        }
        else
        {
            // N·∫øu field c√≥ nhi·ªÅu h∆°n m·ªôt ph·∫ßn t·ª≠, l·∫•y ph·∫ßn ti·∫øp theo c·ªßa field
            string subField = field.Substring(listId[0].Length + 1);
            // ƒê·ªá quy g·ªçi l·∫°i ph∆∞∆°ng th·ª©c GetType v·ªõi subField v√† cursorType√† cursorType
            return subField.GetType(cursorType);
        }
    }

    public static PropertyInfo GetPropertyInfo(this string field, Type cursorType)
    {
        // T√°ch chu·ªói field th√†nh m·∫£ng c√°c ph·∫ßn t·ª≠ d·ª±a tr√™n d·∫•u "."tr√™n d·∫•u "."
        string[] listId = field.Split(".".ToCharArray());
        // L·∫•y th√¥ng tin thu·ªôc t√≠nh ƒë·∫ßu ti√™n c·ªßa cursorType d·ª±a tr√™n t√™n trong listId[0]
        var property = cursorType.GetPropertyIgnoreCase(listId[0]);
        // N·∫øu kh√¥ng t√¨m th·∫•y thu·ªôc t√≠nh, tr·∫£ v·ªÅ null
        if (property == null)
            return null;
        // C·∫≠p nh·∫≠t cursorType th√†nh ki·ªÉu d·ªØ li·ªáu c·ªßa thu·ªôc t√≠nha thu·ªôc t√≠nh
        cursorType = property.PropertyType;
        //Type cursorType = typeof(TObject);
        // N·∫øu field ch·ªâ c√≥ m·ªôt ph·∫ßn t·ª≠ (kh√¥ng c√≥ d·∫•u "."), tr·∫£ v·ªÅ th√¥ng tin c·ªßa thu·ªôc t√≠nh propertya thu·ªôc t√≠nh property
        if (listId.Length == 1)
        {
            return property;
        }
        else
        {
            // N·∫øu field c√≥ nhi·ªÅu h∆°n m·ªôt ph·∫ßn t·ª≠, l·∫•y ph·∫ßn ti·∫øp theo c·ªßa field
            string subField = field.Substring(listId[0].Length + 1);
            // N·∫øu cursorType l√† m·ªôt generic type, l·∫•y th√¥ng tin thu·ªôc t√≠nh c·ªßa generic argument ƒë·∫ßu ti√™nent ƒë·∫ßu ti√™n
            if (cursorType.GenericTypeArguments.Length > 0)
            {
                return subField.GetPropertyInfo(cursorType.GenericTypeArguments[0]);
            }
            else
                // Ng∆∞·ª£c l·∫°i, l·∫•y th√¥ng tin thu·ªôc t√≠nh c·ªßa cursorTypea cursorType
                return subField.GetPropertyInfo(cursorType);
        }
    }

    public static PropertyInfo? GetPropertyIgnoreCase(this Type type, string key)
    {
        // L·∫•y danh s√°ch c√°c thu·ªôc t√≠nh c·ªßa ƒë·ªëi t∆∞·ª£ng Type
        var properties = type.GetProperties();
        // Duy·ªát qua t·ª´ng thu·ªôc t√≠nh
        foreach (var prop in properties)
        {
            // So s√°nh t√™n c·ªßa thu·ªôc t√≠nh (b·ªè qua s·ª± ph√¢n bi·ªát ch·ªØ hoa ch·ªØ th∆∞·ªùng)
            if (prop.Name.ToLower() == key.ToLower())
            {
                // N·∫øu t√¨m th·∫•y thu·ªôc t√≠nh c√≥ t√™n t∆∞∆°ng ƒë∆∞∆°ng, tr·∫£ v·ªÅ thu·ªôc t√≠nh ƒë√≥v·ªÅ thu·ªôc t√≠nh ƒë√≥
                return prop;
            }
        }

        // N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ nullv·ªÅ null
        return null;
    }

    public static string ValidJavaScriptString(this string text)
    {
        if (text == null)
            return "";
        text = text.Replace("'null'", "").Replace("null", "").Replace("undefined", "").Replace("Other", "");
        return text;
    }

    //chuyen sang tieng viet khong dau
    public static string ToUnsign(this string kq)
    {
        if (kq == null)
            return "";
        string[,] Mang = new string[14, 18];
        byte i = 0;
        byte j = 0;
        string? Chu·ªói = null;
        string? Thga = null;
        string? Thge = null;
        string? Thgo = null;
        string? Thgu = null;
        string? Thgi = null;
        string? Thgd = null;
        string? Thgy = null;
        string? HoaA = null;
        string? HoaE = null;
        string? HoaO = null;
        string? HoaU = null;
        string? HoaI = null;
        string? HoaD = null;
        string? HoaY = null;
        Chu·ªói = "aAeEoOuUiIdDyY";
        Thga = "√°√†·∫°·∫£√£√¢·∫•·∫ß·∫≠·∫©·∫´ƒÉ·∫Ø·∫±·∫∑·∫≥·∫µ";
        HoaA = "√Å√Ä·∫†·∫¢√É√Ç·∫§·∫¶·∫¨·∫®·∫™ƒÇ·∫Æ·∫∞·∫∂·∫≤·∫¥";
        Thge = "√©√®·∫π·∫ª·∫Ω√™·∫ø·ªÅ·ªá·ªÉ·ªÖeeeeee";
        HoaE = "√â√à·∫∏·∫∫·∫º√ä·∫æ·ªÄ·ªÜ·ªÇ·ªÑEEEEEE";
        Thgo = "√≥√≤·ªç·ªè√µ√¥·ªë·ªì·ªô·ªï·ªó∆°·ªõ·ªù·ª£·ªü·ª°";
        HoaO = "√ì√í·ªå·ªé√ï√î·ªê·ªí·ªò·ªî·ªñ∆†·ªö·ªú·ª¢·ªû·ª†";
        Thgu = "√∫√π·ª•·ªß≈©∆∞·ª©·ª´·ª±·ª≠·ªØuuuuuu";
        HoaU = "√ö√ô·ª§·ª¶≈®∆Ø·ª®·ª™·ª∞·ª¨·ªÆUUUUUU";
        Thgi = "√≠√¨·ªã·ªâƒ©iiiiiiiiiiii";
        HoaI = "√ç√å·ªä·ªàƒ®IIIIIIIIIIII";
        Thgd = "ƒëdddddddddddddddd";
        HoaD = "ƒêDDDDDDDDDDDDDDDD";
        Thgy = "√Ω·ª≥·ªµ·ª∑·ªπyyyyyyyyyyyy";
        HoaY = "√ù·ª≤·ª¥·ª∂·ª∏YYYYYYYYYYYY";

        for (i = 0; i <= 13; i++)
        {
            Mang[i, 0] = Chu·ªói.Substring(i, 1);
        }
        for (j = 1; j <= 17; j++)
        {
            for (i = 1; i <= 17; i++)
            {
                Mang[0, i] = Thga.Substring(i - 1, 1);
                //N·∫°p t·ª´ng k√Ω t·ª± trong chu·ªói Thga v√†o t·ª´ng √¥ trong h√†ng 0
                Mang[1, i] = HoaA.Substring(i - 1, 1);
                //N·∫°p t·ª´ng k√Ω t·ª± trong chu·ªói HoaA v√†o t·ª´ng √¥ trong  h√†ng 1
                Mang[2, i] = Thge.Substring(i - 1, 1);
                //N·∫°p t·ª´ng k√Ω t·ª± trong chu·ªói Thge v√†o t·ª´ng √¥ trong  h√†ng 2
                Mang[3, i] = HoaE.Substring(i - 1, 1);
                //N·∫°p t·ª´ng k√Ω t·ª± trong chu·ªói HoaE v√†o t·ª´ng √¥ trong  h√†ng 3
                Mang[4, i] = Thgo.Substring(i - 1, 1);
                //N·∫°p t·ª´ng k√Ω t·ª± trong chu·ªói Thgo v√†o t·ª´ng √¥ trong  h√†ng 4
                Mang[5, i] = HoaO.Substring(i - 1, 1);
                //N·∫°p t·ª´ng k√Ω t·ª± trong chu·ªói HoaO v√†o t·ª´ng √¥ trong  h√†ng 5
                Mang[6, i] = Thgu.Substring(i - 1, 1);
                //N·∫°p t·ª´ng k√Ω t·ª± trong chu·ªói Thgu v√†o t·ª´ng √¥ trong  h√†ng 6
                Mang[7, i] = HoaU.Substring(i - 1, 1);
                //N·∫°p t·ª´ng k√Ω t·ª± trong chu·ªói HoaU v√†o t·ª´ng √¥ trong  h√†ng 7
                Mang[8, i] = Thgi.Substring(i - 1, 1);
                //N·∫°p t·ª´ng k√Ω t·ª± trong chu·ªói Thgi v√†o t·ª´ng √¥ trong  h√†ng 8
                Mang[9, i] = HoaI.Substring(i - 1, 1);
                //N·∫°p t·ª´ng k√Ω t·ª± trong chu·ªói HoaI v√†o t·ª´ng √¥ trong  h√†ng 9
                Mang[10, i] = Thgd.Substring(i - 1, 1);
                //N·∫°p t·ª´ng k√Ω t·ª± trong chu·ªói Thgd v√†o t·ª´ng √¥ trong  h√†ng 10
                Mang[11, i] = HoaD.Substring(i - 1, 1);
                //N·∫°p t·ª´ng k√Ω t·ª± trong chu·ªói HoaD v√†o t·ª´ng √¥ trong  h√†ng 11
                Mang[12, i] = Thgy.Substring(i - 1, 1);
                //N·∫°p t·ª´ng k√Ω t·ª± trong chu·ªói Thgy v√†o t·ª´ng √¥ trong  h√†ng 12
                Mang[13, i] = HoaY.Substring(i - 1, 1);
                //N·∫°p t·ª´ng k√Ω t·ª± trong chu·ªói HoaY v√†o t·ª´ng √¥ trong  h√†ng 13
            }
        }


        string? T·∫°m1 = null;
        string? T·∫°m2 = null;
        T·∫°m1 = kq;
        for (j = 0; j <= 13; j++)
        {
            for (i = 1; i <= 17; i++)
            {
                T·∫°m2 = T·∫°m1.Replace(Mang[j, i], Mang[j, 0]);
                T·∫°m1 = T·∫°m2;
            }
        }
        return T·∫°m1;
    }


    public static string ToValidFileName(this string text)
    {
        String unsigntext = ToUnsign(text);
        String validurl = "";
        char[] listch = unsigntext.ToCharArray();
        char space = ' ';
        char lastchar = space;
        foreach (char ch in listch)
        {
            if (validFileNameCharacters.Contains(ch))
            {
                lastchar = ch;
                validurl += lastchar;
            }
            else
            {
                if (lastchar != space)
                {
                    lastchar = space;
                    validurl += lastchar;
                }
            }
        }

        return validurl.Trim();
    }

    public static string ToValidKeyName(this string text)
    {
        // Chuy·ªÉn ƒë·ªïi chu·ªói th√†nh chu·ªói kh√¥ng d·∫•u
        string unsigntext = ToUnsign(text);

        // Chu·ªói k·∫øt qu·∫£ l√† chu·ªói r·ªóng ban ƒë·∫ßu
        string validKeyName = "";

        // Chuy·ªÉn ƒë·ªïi chu·ªói th√†nh m·∫£ng c√°c k√Ω t·ª±
        char[] characters = unsigntext.ToCharArray();

        // K√Ω t·ª± ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ thay th·∫ø kho·∫£ng tr·∫Øng
        char spaceReplacement = '_';

        // K√Ω t·ª± cu·ªëi c√πng ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ theo d√µi xem ƒë√£ th√™m k√Ω t·ª± n√†o v√†o chu·ªói k·∫øt qu·∫£ ch∆∞a
        char lastChar = spaceReplacement;

        // Duy·ªát qua t·ª´ng k√Ω t·ª± trong m·∫£ng k√Ω t·ª±
        foreach (char ch in characters)
        {
            // Ki·ªÉm tra xem k√Ω t·ª± c√≥ n·∫±m trong danh s√°ch c√°c k√Ω t·ª± h·ª£p l·ªá c·ªßa t√™n kh√≥a kh√¥ng
            if (validKeyNameCharacters.Contains(ch))
            {
                // N·∫øu l√† k√Ω t·ª± h·ª£p l·ªá, th√™m v√†o chu·ªói k·∫øt qu·∫£ v√† c·∫≠p nh·∫≠t k√Ω t·ª± cu·ªëi c√πng
                lastChar = ch;
                validKeyName += lastChar;
            }
            else
            {
                // N·∫øu kh√¥ng ph·∫£i l√† k√Ω t·ª± h·ª£p l·ªá
                if (lastChar != spaceReplacement)
                {
                    // N·∫øu k√Ω t·ª± cu·ªëi c√πng ƒë√£ ƒë∆∞·ª£c th√™m v√†o chu·ªói k·∫øt qu·∫£, th√™m k√Ω t·ª± thay th·∫ø (spaceReplacement) v√†o chu·ªói k·∫øt qu·∫£
                    lastChar = spaceReplacement;
                    validKeyName += lastChar;
                }
            }
        }

        // Tr·∫£ v·ªÅ chu·ªói k·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu v√† cu·ªëi
        return validKeyName.Trim();
    }

    public static string ToValidGraphTypeKeyName(this string text)
    {
        // Ki·ªÉm tra n·∫øu chu·ªói ƒë·∫ßu v√†o l√† null ho·∫∑c r·ªóng th√¨ tr·∫£ v·ªÅ chu·ªói r·ªóng
        if (string.IsNullOrEmpty(text))
            return "";

        // Chuy·ªÉn ƒë·ªïi chu·ªói ƒë·∫ßu v√†o th√†nh chu·ªói kh√¥ng d·∫•u (unsigned string)
        string unsigntext = ToUnsign(text);

        // Kh·ªüi t·∫°o m·ªôt StringBuilder ƒë·ªÉ x√¢y d·ª±ng chu·ªói k·∫øt qu·∫£
        StringBuilder validGraphTypeKeyNameBuilder = new StringBuilder();

        // K√Ω t·ª± thay th·∫ø kho·∫£ng tr·∫Øng
        char spaceReplacement = '_';

        // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ k√Ω t·ª± cu·ªëi c√πng ƒë∆∞·ª£c x·ª≠ l√Ω
        char lastChar = spaceReplacement;

        // Duy·ªát t·ª´ng k√Ω t·ª± trong chu·ªói kh√¥ng d·∫•u
        foreach (char ch in unsigntext)
        {
            // N·∫øu k√Ω t·ª± hi·ªán t·∫°i thu·ªôc danh s√°ch c√°c k√Ω t·ª± h·ª£p l·ªá cho GraphQL key name
            if (validGraphQLKeyNameCharacters.Contains(ch))
            {
                // C·∫≠p nh·∫≠t k√Ω t·ª± cu·ªëi c√πng v√† th√™m v√†o StringBuilder
                lastChar = ch;
                validGraphTypeKeyNameBuilder.Append(lastChar);
            }
            else if (lastChar != spaceReplacement)
            {
                // N·∫øu k√Ω t·ª± cu·ªëi c√πng kh√¥ng ph·∫£i l√† k√Ω t·ª± thay th·∫ø kho·∫£ng tr·∫Øng,
                // thay th·∫ø b·∫±ng k√Ω t·ª± thay th·∫ø kho·∫£ng tr·∫Øng v√† th√™m v√†o StringBuilder
                lastChar = spaceReplacement;
                validGraphTypeKeyNameBuilder.Append(lastChar);
            }
        }

        // Chuy·ªÉn StringBuilder th√†nh chu·ªói v√† lo·∫°i b·ªè c√°c k√Ω t·ª± thay th·∫ø kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu v√† cu·ªëi chu·ªói
        return validGraphTypeKeyNameBuilder.ToString().Trim('_');
    }

    public static string ToValidUrl(this string text, string spliter = "-")
    {
        // Ki·ªÉm tra n·∫øu chu·ªói ƒë·∫ßu v√†o l√† null ho·∫∑c r·ªóng th√¨ tr·∫£ v·ªÅ chu·ªói r·ªóng
        if (string.IsNullOrEmpty(text))
            return "";

        // Chuy·ªÉn ƒë·ªïi chu·ªói ƒë·∫ßu v√†o th√†nh chu·ªói kh√¥ng d·∫•u v√† chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng (lowercase)
        string unsigntext = ToUnsign(text).ToLower();

        // Kh·ªüi t·∫°o m·ªôt StringBuilder ƒë·ªÉ x√¢y d·ª±ng chu·ªói k·∫øt qu·∫£
        StringBuilder validUrlBuilder = new StringBuilder();

        // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ k√Ω t·ª± cu·ªëi c√πng ƒë∆∞·ª£c x·ª≠ l√Ω
        char lastChar = (char)0;

        // Duy·ªát t·ª´ng k√Ω t·ª± trong chu·ªói kh√¥ng d·∫•u v√† ch·ªØ th∆∞·ªùng
        foreach (char ch in unsigntext)
        {
            // N·∫øu k√Ω t·ª± hi·ªán t·∫°i thu·ªôc danh s√°ch c√°c k√Ω t·ª± h·ª£p l·ªá cho URL
            if (validURLCharacters.Contains(ch))
            {
                // C·∫≠p nh·∫≠t k√Ω t·ª± cu·ªëi c√πng v√† th√™m v√†o StringBuilder
                lastChar = ch;
                validUrlBuilder.Append(lastChar);
            }
            else if (!spliter.IsNullOrEmpty() && lastChar != spliter[0])
            {
                // N·∫øu k√Ω t·ª± cu·ªëi c√πng kh√¥ng ph·∫£i l√† k√Ω t·ª± ph√¢n c√°ch v√† k√Ω t·ª± ph√¢n c√°ch kh√¥ng r·ªóng
                // Th√™m k√Ω t·ª± ph√¢n c√°ch v√†o StringBuilder v√† c·∫≠p nh·∫≠t k√Ω t·ª± cu·ªëi c√πng
                validUrlBuilder.Append(spliter[0]);
                lastChar = spliter[0];
            }
        }

        // Tr·∫£ v·ªÅ chu·ªói k·∫øt qu·∫£ t·ª´ StringBuilder
        return validUrlBuilder.ToString();
    }

    public static string Bash(this string cmd, string fileExecute = "sh", bool waitProcess = true)
    {
        var escapedArgs = cmd.Replace("\"", "\\\"");

        var process = new Process()
        {
            StartInfo = new ProcessStartInfo
            {
                FileName = fileExecute,
                Arguments = $"-c \"{escapedArgs}\"",
                RedirectStandardOutput = true,
                RedirectStandardInput = true,
                UseShellExecute = false,
                CreateNoWindow = true,
                WindowStyle = ProcessWindowStyle.Hidden
            }
        };
        process.Start();
        string result = process.StandardOutput.ReadToEnd();
        if (waitProcess)
            process.WaitForExit();
        return result;
    }

    public static string GetTelco(this string PhoneNumber)
    {
        string Vietel = "086-096-097-098-032-033-034-035-036-037-038-039";
        string Mobifone = "090-093-070-079-077-076-078";
        string Vinaphone = "091-094-083-084-085-081-082";
        string Vietnamemobile = "092-056-058";
        string GMobile = "099-059";
        string phonenumber = PhoneNumber.FormatPhonenumberStartWith0();
        foreach (string item in Vietel.Split('-'))
        {
            if (phonenumber.StartsWith(item))
                return "VIETTEL";
        }
        foreach (string item in Mobifone.Split('-'))
        {
            if (phonenumber.StartsWith(item))
                return "MOBIFONE";
        }
        foreach (string item in Vinaphone.Split('-'))
        {
            if (phonenumber.StartsWith(item))
                return "VINAPHONE";
        }
        foreach (string item in Vietnamemobile.Split('-'))
        {
            if (phonenumber.StartsWith(item))
                return "VIETNAMMOBILE";
        }
        foreach (string item in GMobile.Split('-'))
        {
            if (phonenumber.StartsWith(item))
                return "GMOBILE";
        }

        return "";
    }

    public static bool IsBoolean(this string str)
    {
        try
        {
            bool.Parse(str);
            return true;
        }
        catch { }
        return false;
    }
    public static bool IsNumber(this string str)
    {
        if (String.IsNullOrEmpty(str))
            return false;
        return Regex.Match(str, "^\\d+$").Success;
    }
    public static string FormatPhonenumberStartWith84(this string PhoneNumber)
    {
        PhoneNumber = PhoneNumber.Replace("+", "").Replace("(", "").Replace(")", "");
        PhoneNumber = Regex.Replace(PhoneNumber, "^0", "84");
        return PhoneNumber;
    }

    public static string ConvertToString(this long longvalue, int length)
    {
        string value = longvalue.ToString();
        while (value.Length < length)
        {
            value = "0" + value;
        }
        return value;
    }
    public static string FormatPhonenumberStartWith0(this string PhoneNumber)
    {
        PhoneNumber = PhoneNumber.Replace("+", "").Replace("(", "").Replace(")", "");
        PhoneNumber = Regex.Replace(PhoneNumber, "^84", "0");
        return PhoneNumber;
    }
    public static bool IsPhoneNumber(this string PhoneNumber)
    {
        if (string.IsNullOrEmpty(PhoneNumber))
            return false;
        PhoneNumber = PhoneNumber.FormatPhonenumberStartWith0();
        return Regex.Match(PhoneNumber, "^0[0-9]{9,12}$").Success;
    }
    public static string RemoveSpace(string input)
    {
        return input.Replace(" ", "");
    }

    public static bool IsEmail(this String source)
    {
        return (!String.IsNullOrEmpty(source) && source.IndexOf("@") > 0);
    }

    public static DateTime ToDateTime(this string datetime, string format, string DateSeparator)
    {
        try
        {
            DateTimeFormatInfo dtfi = new DateTimeFormatInfo();
            dtfi.ShortDatePattern = format;
            dtfi.DateSeparator = DateSeparator;
            DateTime objDate = Convert.ToDateTime(datetime, dtfi);
            return objDate;
        }
        catch (Exception ex)
        {
            return DateTime.MinValue;
        }
    }
    public static DateTime ToDateTime(this string datetime)
    {
        return datetime.ToDateTime("dd/MM/yyyy", "/");
    }
    public static DateTime ToDateTime(this string datetime, DateTime defDateTime)
    {
        try
        {
            //return DateTime.Parse(datetime);
            return datetime.ToDateTime("dd/MM/yyyy", "/");
        }
        catch
        {
            return defDateTime;
        }
    }
    public static void TryToDateTime(this string datetime, out DateTime? defDateTime)
    {
        defDateTime = null;
        try
        {
            defDateTime = DateTime.Parse(datetime);
        }
        catch { }
    }
    public static string ToMD5(this string input)
    {
        MD5 md5Hash = MD5.Create();
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes 
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data  
        // and format each one as a hexadecimal string. 
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string. 
        return sBuilder.ToString();
    }
    public static string EncodeSHA256(this string plaintext)
    {
        byte[] bytes = Encoding.UTF8.GetBytes(plaintext);
        SHA256Managed hashstring = new SHA256Managed();
        byte[] hash = hashstring.ComputeHash(bytes);
        string hashString = string.Empty;
        foreach (byte x in hash)
        {
            hashString += String.Format("{0:x2}", x);
        }
        return hashString;
    }
    public static byte[] GetBytes(string str)
    {
        byte[] bytes = new byte[str.Length * sizeof(char)];
        System.Buffer.BlockCopy(str.ToCharArray(), 0, bytes, 0, bytes.Length);
        return bytes;
    }
    public static string EncodeSHA256(this string plaintext, string secretKey)
    {
        secretKey = secretKey ?? "";
        var encoding = new System.Text.UTF8Encoding();
        byte[] keyByte = encoding.GetBytes(secretKey);
        byte[] messageBytes = encoding.GetBytes(plaintext);
        using (var hmacsha256 = new HMACSHA256(keyByte))
        {
            byte[] hash = hmacsha256.ComputeHash(messageBytes);
            string hashString = string.Empty;
            foreach (byte x in hash)
            {
                hashString += String.Format("{0:x2}", x);
            }
            return hashString;
        }
    }
    public static string EncodeAES(this string plaintext, string secretKey)
    {
        byte[] src = Encoding.UTF8.GetBytes(plaintext);
        byte[] key = Encoding.ASCII.GetBytes(secretKey);
        RijndaelManaged aes = new RijndaelManaged();
        aes.Mode = CipherMode.ECB;
        aes.Padding = PaddingMode.PKCS7;
        aes.KeySize = 128;
        aes.IV = new byte[] { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };

        string hashString = string.Empty;
        using (ICryptoTransform encrypt = aes.CreateEncryptor(key, null))
        {
            byte[] hash = encrypt.TransformFinalBlock(src, 0, src.Length);
            encrypt.Dispose();
            hashString = Convert.ToBase64String(hash);
        }
        return hashString;
    }
    public static string EncodeAES(this string plaintext, string secretKey, byte[] iv)
    {
        byte[] src = Encoding.UTF8.GetBytes(plaintext);
        byte[] key = Encoding.ASCII.GetBytes(secretKey);
        RijndaelManaged aes = new RijndaelManaged();
        aes.Mode = CipherMode.ECB;
        aes.Padding = PaddingMode.PKCS7;
        aes.KeySize = 128;
        aes.IV = iv;

        string hashString = string.Empty;
        using (ICryptoTransform encrypt = aes.CreateEncryptor(key, null))
        {
            byte[] hash = encrypt.TransformFinalBlock(src, 0, src.Length);
            encrypt.Dispose();
            hashString = Convert.ToBase64String(hash);
        }
        return hashString;
    }
    public static string DecodeAES(this string encryptedText, string secretKey, byte[] iv)
    {
        byte[] src = Convert.FromBase64String(encryptedText);
        byte[] key = Encoding.ASCII.GetBytes(secretKey);
        RijndaelManaged aes = new RijndaelManaged();
        aes.Mode = CipherMode.CBC;
        aes.Padding = PaddingMode.PKCS7;
        aes.KeySize = 128;
        aes.IV = iv;

        string plaintext = string.Empty;
        using (ICryptoTransform decrypt = aes.CreateDecryptor(key, iv))
        {
            byte[] hash = decrypt.TransformFinalBlock(src, 0, src.Length);
            decrypt.Dispose();
            plaintext = Encoding.UTF8.GetString(hash);
        }
        return plaintext;
    }
    public static string FaceBookSecret(this string content, string key)
    {
        byte[] keyBytes = Encoding.UTF8.GetBytes(key);
        byte[] messageBytes = Encoding.UTF8.GetBytes(content);
        byte[] hash;
        using (HMACSHA256 hmacsha256 = new HMACSHA256(keyBytes))
        {
            hash = hmacsha256.ComputeHash(messageBytes);
        }
        string hashString = string.Empty;
        foreach (byte x in hash)
        {
            hashString += String.Format("{0:x2}", x);
        }
        return hashString;
    }
    public static class Base16
    {
        private static readonly char[] encoding;
        static Base16()
        {
            encoding = new char[16]
            {
            '0', '1', '2', '3', '4', '5', '6', '7',
            '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
            };
        }
        public static string Encode(byte[] data)
        {
            char[] text = new char[data.Length * 2];

            for (int i = 0, j = 0; i < data.Length; i++)
            {
                text[j++] = encoding[data[i] >> 4];
                text[j++] = encoding[data[i] & 0xf];
            }

            return new string(text);
        }
        public static byte[] Decode(string hex)
        {
            //return Enumerable.Range(0, hex.Length)
            //                 .Where(x => x % 2 == 0)
            //                 .Select(x => Convert.ToByte(hex.Substring(x, 2), 16))
            //                 .ToArray();
            return UTF8Encoding.UTF8.GetBytes(hex);
        }
    }
    public static string GenerateAppSecretProof(this string accessToken, string appSecret)
    {
        byte[] key = Base16.Decode(appSecret);
        byte[] hash;
        using (HMAC hmacAlg = new HMACSHA1(key))
        {
            hash = hmacAlg.ComputeHash(Encoding.ASCII.GetBytes(accessToken));
        }
        return Base16.Encode(hash);
    }

    public static string EncodeBase64(this string plainText)
    {
        var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
        return System.Convert.ToBase64String(plainTextBytes);
    }
    public static string DecodeBase64(this string base64EncodedData)
    {
        try
        {
            base64EncodedData = base64EncodedData.Replace('-', '+').Replace('_', '/').PadRight(4 * ((base64EncodedData.Length + 3) / 4), '=');
            var base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData);
            return System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
        }
        catch (Exception ex)
        {
            return base64EncodedData;
        }
    }
    public static bool IsNullOrEmpty(this string text)
    {
        return string.IsNullOrEmpty(text);
    }
    public static string ToUpperFirstChar(this string text)
    {
        if (string.IsNullOrEmpty(text))
            return "";
        return text[0].ToString().ToUpper() + text.Substring(1);
    }

    public static string ToFormatName(this string text, params char[] separator)
    {
        if (string.IsNullOrEmpty(text))
            return "";
        string[] arr = Regex.Replace(text, "\\s+", " ").Split(separator);
        return string.Join(" ", arr.Select(s => s.ToUpperFirstChar()));
    }

    public static string ToLowerCase(this string text)
    {
        if (string.IsNullOrEmpty(text))
        {
            return "";
        }
        return text.ToLower();
    }



}


